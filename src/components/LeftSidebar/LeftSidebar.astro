---
import { removeLeadingSlash, removeTrailingSlash } from '../../util';
import { useTranslations } from '../../i18n/util';
import SidebarContent from './SidebarContent.astro';
import CommunityMenu from '../RightSidebar/CommunityMenu.astro';
import ThemeToggleButton from '../Header/ThemeToggleButton';
import { nav } from '../../util/getNavLinks';

export interface Props {
	currentPage: string;
}

const t = useTranslations();

const { currentPage } = Astro.props as Props;
const currentPageMatch = removeLeadingSlash(removeTrailingSlash(currentPage));

// Group nav menu by sections to properly render.
const sidebarSections = nav.reduce((collection, item) => {
	if ('header' in item) {
		collection.push({ ...item, children: [] });
	} else {
		collection[collection.length - 1].children.push(item);
	}
	return collection;
}, [] as Parameters<typeof SidebarContent>[0]['sidebarSections']);

const learnSections = sidebarSections.filter((section) => section.type === 'learn');
const apiSections = sidebarSections.filter((section) => section.type === 'api');

let activeTab: 'learn' | 'api' = 'learn';

// Match against the two URL segments after the language tag to include sub-pages.
const base = currentPageMatch.split('/').slice(1, 3).join('/');
for (const section of sidebarSections) {
	if (section.children.some((item) => item.slug === base)) {
		activeTab = section.type;
	}
}
---

<nav aria-label={t('leftSidebar.a11yTitle')}>
	<ul class={`nav-groups`}>
		<SidebarContent
			type={'learn'}
			defaultActiveTab={activeTab}
			sidebarSections={learnSections}
			currentPageMatch={currentPageMatch}
		/>
		<SidebarContent
			type={'api'}
			defaultActiveTab={activeTab}
			sidebarSections={apiSections}
			currentPageMatch={currentPageMatch}
		/>
		<li>
			<CommunityMenu hideOnLargerScreens={true} />
		</li>
		<li style="text-align: center;">
			<ThemeToggleButton
				client:visible
				labels={{ useLight: t('themeToggle.useLight'), useDark: t('themeToggle.useDark') }}
			/>
		</li>
	</ul>
</nav>

<script>
	window.addEventListener('DOMContentLoaded', () => {
		var target = document.querySelector('[data-current-parent="true"]');
		target?.scrollIntoView({ block: 'center' });
	});
</script>

<style>
	nav {
		width: 100%;
		height: 100%;
		font-size: var(--theme-text-sm);
	}
	.nav-groups {
		padding-top: 1rem;
		max-height: 100%;
		overflow-x: visible;
		overflow-y: auto;
	}

	@media (min-width: 50em) {
		.nav-groups {
			position: fixed;
			top: calc(var(--theme-navbar-height) + 3rem);
			bottom: 0;
			width: calc(var(--theme-left-sidebar-width) - var(--min-spacing-inline) * 1.6);
		}
	}

	@media not screen and (min-width: 50em) {
		nav :global(.TabGroup) {
			display: none;
		}
	}
</style>
