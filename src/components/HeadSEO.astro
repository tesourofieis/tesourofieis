---
import type { CollectionEntry } from 'astro:content';
import languages from '../i18n/languages';
import { useTranslations } from '../i18n/util';
import { getLanguageFromURL } from '../util';

export interface Props {
	content: CollectionEntry<'docs'>['data'];
	canonicalURL: URL;
}

const { content, canonicalURL } = Astro.props;
const t = useTranslations(Astro);
const lang = getLanguageFromURL(canonicalURL?.pathname || '/');
---

<!-- Page Metadata -->
<link rel="canonical" href={canonicalURL} />

{
	/* Language alternates. See https://developers.google.com/search/docs/advanced/crawling/localized-versions#html */
}
{
	Object.keys(languages).map((altLang) => (
		<link rel="alternate" href={canonicalURL.href.replace(lang, altLang) || '/'} />
	))
}

// <!-- Algolia docsearch language facet -->
// <meta name="docsearch:language" />

<!-- OpenGraph Tags -->
<meta property="og:title" content={content.title ?? t('site.title')} />
<meta property="og:type" content="article" />
<meta property="og:url" content={canonicalURL} />
<meta
	name="description"
	property="og:description"
	content={content.description ? content.description : t('site.description')}
/>
<meta property="og:site_name" content={t('site.title')} />

<!-- Twitter Tags -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content={content.title ?? t('site.title')} />
<meta
	name="twitter:description"
	content={content.description ? content.description : t('site.description')}
/>

<!--
  TODO: Add json+ld data, maybe https://schema.org/APIReference makes sense?
  Docs: https://developers.google.com/search/docs/advanced/structured-data/intro-structured-data
  https://www.npmjs.com/package/schema-dts seems like a great resource for implementing this.
  Even better, thereâ€™s a React component that integrates with `schema-dts`: https://github.com/google/react-schemaorg
-->
